class FormHandler {
    constructor(app) {
        this.app = app;
    }
    
    applyProfileColor(color) {
        this.app.state.userData.profileColor = color;
        localStorage.setItem('datingProfile', JSON.stringify(this.app.state.userData));
        
        document.documentElement.style.setProperty('--primary', color);
        const rgb = this.hexToRgb(color);
        if (rgb) {
            document.documentElement.style.setProperty('--primary-rgb', `${rgb.r},${rgb.g},${rgb.b}`);
        }
        document.documentElement.style.setProperty('--primary-dark', this.darkenColor(color, 20));
        document.documentElement.style.setProperty('--primary-light', this.lightenColor(color, 40));
    }

    darkenColor(color, percent) {
        const num = parseInt(color.replace('#', ''), 16);
        const amt = Math.round(2.55 * percent);
        const R = Math.max(0, (num >> 16) - amt);
        const G = Math.max(0, (num >> 8 & 0x00FF) - amt);
        const B = Math.max(0, (num & 0x0000FF) - amt);
        return `#${(1 << 24 | R << 16 | G << 8 | B).toString(16).slice(1)}`;
    }

    lightenColor(color, percent) {
        const num = parseInt(color.replace('#', ''), 16);
        const amt = Math.round(2.55 * percent);
        const R = Math.min(255, (num >> 16) + amt);
        const G = Math.min(255, (num >> 8 & 0x00FF) + amt);
        const B = Math.min(255, (num & 0x0000FF) + amt);
        return `#${(1 << 24 | R << 16 | G << 8 | B).toString(16).slice(1)}`;
    }

    hexToRgb(hex) {
        const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function(m, r, g, b) {
            return r + r + g + g + b + b;
        });
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }

    renderForm() {
        this.app.elements.registrationForm.innerHTML = `
            <div class="form-container">
                ${this.generateSteps()}
            </div>
        `;
        this.setupFormHandlers();
        this.focusCurrentField();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —à–∞–≥–µ
        if (this.app.state.currentStep === 9) {
            this.initColorSelection();
        }
        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–æ—Ç–æ —Ç–∞–∫–∂–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —à–∞–≥–µ
        if (this.app.state.currentStep === 10) {
            this.renderPhotos();
        }
    }

    generateSteps() {
        return Array.from({ length: this.app.state.totalSteps }, (_, i) => i + 1)
            .map(step => this.generateStep(step)).join('');
    }

    generateStep(step) {
        return `
            <div class="form-step ${step === this.app.state.currentStep ? 'active' : ''}" data-step="${step}">
                ${this.getStepContent(step)}
                ${this.getStepButtons(step)}
            </div>
        `;
    }

    getStepContent(step) {
        const stepContents = {
            1: this.getNameStep(),
            2: this.getGenderStep(),
            3: this.getAgeStep(),
            4: this.getZodiacStep(),
            5: this.getCityStep(),
            6: this.getLookingForStep(),
            7: this.getInterestsStep(),
            8: this.getPreferenceStep(),
            9: this.getProfileColorStep(), // –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è —Ü–≤–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
            10: this.getPhotosStep(),      // –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è —Ñ–æ—Ç–æ
            11: this.getAboutMeStep()      // –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è "–û —Å–µ–±–µ"
        };
        return stepContents[step] || '';
    }

    getNameStep() {
        return `
            <h2 class="section-title">–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</h2>
            <p class="section-description">–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º —É–∑–Ω–∞—Ç—å –≤–∞—Å.</p>
            <input type="text" class="input-field" id="userName" 
                   placeholder="–í–∞—à–µ –∏–º—è" 
                   value="${this.app.state.userData.name || ''}" required>
        `;
    }

    getGenderStep() {
        return `
            <h2 class="section-title">–í–∞—à –ø–æ–ª</h2>
            <p class="section-description">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª.</p>
            <div class="tags-container">
                <div class="tag ${this.app.state.userData.gender === 'male' ? 'selected' : ''}" 
                     data-gender="male">
                    üë® –ú—É–∂—á–∏–Ω–∞
                </div>
                <div class="tag ${this.app.state.userData.gender === 'female' ? 'selected' : ''}" 
                     data-gender="female">
                    üë© –ñ–µ–Ω—â–∏–Ω–∞
                </div>
            </div>
        `;
    }

    getAgeStep() {
        return `
            <h2 class="section-title">–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?</h2>
            <p class="section-description">–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç ${this.app.config.minAge} –¥–æ ${this.app.config.maxAge} –ª–µ—Ç.</p>
            <input type="number" class="input-field" id="userAge" 
                   min="${this.app.config.minAge}" max="${this.app.config.maxAge}" 
                   placeholder="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç" 
                   value="${this.app.state.userData.age || ''}" required>
        `;
    }

    getZodiacStep() {
        return `
            <h2 class="section-title">–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞</h2>
            <p class="section-description">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞.</p>
            <select class="input-field" id="userZodiac">
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞</option>
                ${this.app.config.zodiacSigns.map(sign => `
                    <option value="${sign.id}" ${this.app.state.userData.zodiacSign === sign.id ? 'selected' : ''}>
                        ${sign.name} (${sign.dates})
                    </option>
                `).join('')}
            </select>
        `;
    }

    getCityStep() {
        return `
            <h2 class="section-title">–í–∞—à –≥–æ—Ä–æ–¥</h2>
            <p class="section-description">–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∂–∏–≤–µ—Ç–µ.</p>
            <input type="text" class="input-field" id="userCity" 
                   placeholder="–ì–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?" 
                   value="${this.app.state.userData.city || ''}" required>
        `;
    }

    getLookingForStep() {
        return `
            <h2 class="section-title">–ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ?</h2>
            <p class="section-description">–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç –≤–∞—à–∏ —Ü–µ–ª–∏.</p>
            <div class="tags-container">
                ${this.app.config.lookingForOptions.map(option => `
                    <div class="tag ${(this.app.state.userData.lookingFor || []).includes(option.id) ? 'selected' : ''}" 
                         data-looking-for="${option.id}">
                        ${option.emoji} ${option.name}
                    </div>
                `).join('')}
            </div>
        `;
    }

    getInterestsStep() {
        return `
            <h2 class="section-title">–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã</h2>
            <p class="section-description">–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ ${this.app.config.maxInterests} –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –±–ª–∏–∑–∫–∏.</p>
            <div class="tags-container" id="interestsContainer">
                ${this.app.config.interests.map(interest => `
                    <div class="tag ${this.app.state.userData.interests.includes(interest.id) ? 'selected' : ''}" 
                         data-interest="${interest.id}">
                        ${interest.emoji} ${interest.name}
                    </div>
                `).join('')}
            </div>
        `;
    }

    getPreferenceStep() {
        return `
            <h2 class="section-title">–ö–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ?</h2>
            <p class="section-description">–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –ø–æ–¥–±–æ—Ä–∫–µ –∞–Ω–∫–µ—Ç.</p>
            <div class="tags-container">
                ${this.app.config.preferenceOptions.map(option => `
                    <div class="tag ${this.app.state.userData.preference === option.id ? 'selected' : ''}" 
                         data-preference="${option.id}">
                        ${option.emoji} ${option.name}
                    </div>
                `).join('')}
            </div>
        `;
    }

    getProfileColorStep() {
        return `
            <h2 class="section-title">–¶–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è</h2>
            <p class="section-description">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.</p>
            <div class="color-palette">
                ${this.app.config.colors.map(color => `
                    <div class="color-option ${this.app.state.userData.profileColor === color ? 'selected' : ''}" 
                         style="background-color: ${color}" 
                         data-color="${color}"></div>
                `).join('')}
            </div>
            <div class="color-custom">
                <input type="color" id="customColor" value="${this.app.state.userData.profileColor}">
                <label>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ü–≤–µ—Ç</label>
            </div>
        `;
    }

    getPhotosStep() {
        return `
            <h2 class="section-title">–í–∞—à–∏ —Ñ–æ—Ç–æ</h2>
            <p class="section-description">–î–æ–±–∞–≤—å—Ç–µ –¥–æ ${this.app.config.maxPhotos} —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —è—Ä—á–µ.</p>
            <div class="avatar-upload">
                <label class="btn btn-secondary">
                    üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                    <input type="file" id="photoUpload" accept="image/*" hidden multiple>
                </label>
            </div>
            <div class="photos-grid" id="photosContainer">
                ${this.app.state.userData.photos.map((photo, index) => `
                    <div class="photo-preview ${this.app.state.userData.avatar === photo ? 'main-avatar' : ''}" 
                         style="background-image: url(${photo})">
                        <button class="set-avatar-btn" data-index="${index}">–ê–≤–∞—Ç–∞—Ä</button>
                        <button class="delete-photo" data-index="${index}">√ó</button>
                    </div>
                `).join('')}
            </div>
        `;
    }

    getAboutMeStep() {
        return `
            <h2 class="section-title">–û —Å–µ–±–µ</h2>
            <p class="section-description">–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å –≤–∞—Å –ª—É—á—à–µ.</p>
            <textarea class="input-field" id="userDescription" 
                      placeholder="–Ø –ª—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–Ω–∏–≥–∏ –∏..." rows="4">${this.app.state.userData.description || ''}</textarea>
        `;
    }

    getStepButtons(step) {
        return `
            <div class="navigation">
                <button class="btn next-step" ${step === this.app.state.totalSteps ? 'id="saveProfileBtn"' : ''}>
                    ${step === this.app.state.totalSteps ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' : '–î–∞–ª–µ–µ'}
                </button>
                ${step > 1 ? `<button class="btn btn-secondary prev-step">–ù–∞–∑–∞–¥</button>` : ''}
            </div>
        `;
    }

    setupFormHandlers() {
        this.setupNavigationHandlers();
        this.setupGenderHandlers();
        this.setupZodiacHandler();
        this.setupLookingForHandlers();
        this.setupInterestsHandlers();
        this.setupPreferenceHandlers();
        this.setupColorHandlers();
        this.setupPhotoHandlers();
        this.setupEnterKeyHandler();
    }

    setupNavigationHandlers() {
        document.querySelectorAll('.next-step').forEach(btn => {
            btn.addEventListener('click', () => this.handleNextStep());
        });

        document.querySelectorAll('.prev-step').forEach(btn => {
            btn.addEventListener('click', () => this.prevStep());
        });
    }

    setupGenderHandlers() {
        document.querySelectorAll('[data-gender]').forEach(tag => {
            tag.addEventListener('click', (e) => {
                document.querySelectorAll('[data-gender]').forEach(t => t.classList.remove('selected'));
                e.currentTarget.classList.add('selected');
                this.app.state.userData.gender = e.currentTarget.dataset.gender;
            });
        });
    }

    setupZodiacHandler() {
        const zodiacInput = document.getElementById('userZodiac');
        if (zodiacInput) {
            zodiacInput.addEventListener('change', (e) => {
                this.app.state.userData.zodiacSign = e.target.value;
            });
        }
    }

    setupLookingForHandlers() {
        document.querySelectorAll('[data-looking-for]').forEach(tag => {
            tag.addEventListener('click', (e) => {
                const option = e.currentTarget.dataset.lookingFor;
                const isSelected = e.currentTarget.classList.contains('selected');
                
                if (isSelected) {
                    e.currentTarget.classList.remove('selected');
                    this.app.state.userData.lookingFor = this.app.state.userData.lookingFor.filter(i => i !== option);
                } else {
                    e.currentTarget.classList.add('selected');
                    this.app.state.userData.lookingFor.push(option);
                }
            });
        });
    }

    setupInterestsHandlers() {
        document.querySelectorAll('[data-interest]').forEach(tag => {
            tag.addEventListener('click', (e) => {
                const interestId = e.currentTarget.dataset.interest;
                const isSelected = e.currentTarget.classList.contains('selected');
                
                if (isSelected) {
                    e.currentTarget.classList.remove('selected');
                    this.app.state.userData.interests = this.app.state.userData.interests.filter(i => i !== interestId);
                } else {
                    if (this.app.state.userData.interests.length < this.app.config.maxInterests) {
                        e.currentTarget.classList.add('selected');
                        this.app.state.userData.interests.push(interestId);
                    } else {
                        alert(`–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ ${this.app.config.maxInterests} –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.`);
                    }
                }
            });
        });
    }

    setupPreferenceHandlers() {
        document.querySelectorAll('[data-preference]').forEach(tag => {
            tag.addEventListener('click', (e) => {
                document.querySelectorAll('[data-preference]').forEach(t => t.classList.remove('selected'));
                e.currentTarget.classList.add('selected');
                this.app.state.userData.preference = e.currentTarget.dataset.preference;
            });
        });
    }

    setupColorHandlers() {
        // –≠—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —à–∞–≥ —Å —Ü–≤–µ—Ç–æ–º –∞–∫—Ç–∏–≤–µ–Ω
        if (this.app.state.currentStep === 9) {
            document.querySelectorAll('[data-color]').forEach(color => {
                color.addEventListener('click', (e) => {
                    const selectedColor = e.currentTarget.dataset.color;
                    this.updateColorSelection(selectedColor);
                });
            });

            const customColor = document.getElementById('customColor');
            if (customColor) {
                customColor.addEventListener('input', (e) => {
                    const selectedColor = e.target.value;
                    this.updateColorSelection(selectedColor);
                });
            }
        }
    }

    setupPhotoHandlers() {
        // –≠—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —à–∞–≥ —Å —Ñ–æ—Ç–æ –∞–∫—Ç–∏–≤–µ–Ω
        if (this.app.state.currentStep === 10) {
            const upload = document.getElementById('photoUpload');
            if (upload) {
                upload.addEventListener('change', (e) => {
                    const files = Array.from(e.target.files);
                    if (files.length + this.app.state.userData.photos.length > this.app.config.maxPhotos) {
                        alert(`–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ ${this.app.config.maxPhotos} —Ñ–æ—Ç–æ`);
                        return;
                    }

                    files.forEach(file => {
                        if (file.type.match('image.*')) {
                            const reader = new FileReader();
                            reader.onload = (e) => {
                                this.app.state.userData.photos.push(e.target.result);
                                if (!this.app.state.userData.avatar) {
                                    this.app.state.userData.avatar = e.target.result;
                                }
                                this.renderPhotos();
                            };
                            reader.readAsDataURL(file);
                        }
                    });
                });
            }

            // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ photosContainer
            const photosContainer = document.getElementById('photosContainer');
            if (photosContainer) {
                photosContainer.addEventListener('click', (e) => {
                    if (e.target.classList.contains('delete-photo')) {
                        const index = parseInt(e.target.dataset.index);
                        const photoToDelete = this.app.state.userData.photos[index];
                        
                        if (this.app.state.userData.avatar === photoToDelete) {
                            this.app.state.userData.avatar = this.app.state.userData.photos.length > 1 ? 
                                this.app.state.userData.photos.find((_, i) => i !== index) : null;
                        }
                        
                        this.app.state.userData.photos.splice(index, 1);
                        this.renderPhotos();
                    }

                    if (e.target.classList.contains('set-avatar-btn')) {
                        const index = parseInt(e.target.dataset.index);
                        this.app.state.userData.avatar = this.app.state.userData.photos[index];
                        this.renderPhotos();
                    }
                });
            }
        }
    }

    setupEnterKeyHandler() {
        document.querySelectorAll('.input-field').forEach(input => {
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.handleNextStep();
                }
            });
        });
    }

    initColorSelection() {
        const savedColor = this.app.state.userData.profileColor || '#FF6B6B';
        this.updateColorSelection(savedColor);
    }

    updateColorSelection(selectedColor) {
        this.app.state.userData.profileColor = selectedColor;
        
        const darkerColor = this.darkenColor(selectedColor, 20);
        const lighterColor = this.lightenColor(selectedColor, 40);
        const rgb = this.hexToRgb(selectedColor);
        
        document.documentElement.style.setProperty('--primary', selectedColor);
        document.documentElement.style.setProperty('--primary-dark', darkerColor);
        document.documentElement.style.setProperty('--primary-light', lighterColor);
        if (rgb) {
            document.documentElement.style.setProperty('--primary-rgb', `${rgb.r},${rgb.g},${rgb.b}`);
        }
        
        this.updateColorPalette(selectedColor);
        this.updateCustomColorInput(selectedColor);
    }

    updateColorPalette(color) {
        document.querySelectorAll('.color-option').forEach(option => {
            option.classList.remove('selected');
            if (option.dataset.color === color) {
                option.classList.add('selected');
            }
        });
    }

    updateCustomColorInput(color) {
        const customColorInput = document.getElementById('customColor');
        if (customColorInput) {
            customColorInput.value = color;
        }
    }

    renderPhotos() {
        const container = document.getElementById('photosContainer');
        if (container) {
            container.innerHTML = this.app.state.userData.photos.map((photo, index) => `
                <div class="photo-preview ${this.app.state.userData.avatar === photo ? 'main-avatar' : ''}" 
                     style="background-image: url(${photo})">
                    <button class="set-avatar-btn" data-index="${index}">–ê–≤–∞—Ç–∞—Ä</button>
                    <button class="delete-photo" data-index="${index}">√ó</button>
                </div>
            `).join('');
        }
    }

    handleNextStep() {
        if (this.app.state.currentStep === 5) { // –ï—Å–ª–∏ —ç—Ç–æ —à–∞–≥ "–ì–æ—Ä–æ–¥"
            if (!document.getElementById('userCity').value.trim()) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.');
                return;
            }
            this.saveStepData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            this.app.showLocationModal(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–∑ app.js –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        } else if (this.app.state.currentStep === this.app.state.totalSteps) {
            this.saveProfile();
        } else {
            this.nextStep();
        }
    }

    nextStep() {
        if (!this.validateStep()) return;
        this.saveStepData();
        this.goToStep(this.app.state.currentStep + 1);
    }

    prevStep() {
        this.goToStep(this.app.state.currentStep - 1);
    }

    goToStep(step) {
        if (step < 1 || step > this.app.state.totalSteps) return;
        
        const currentStepEl = document.querySelector('.form-step.active');
        if (currentStepEl) {
            currentStepEl.classList.remove('active');
        }
        
        this.app.state.currentStep = step;
        const nextStepEl = document.querySelector(`[data-step="${step}"]`);
        
        if (nextStepEl) {
            nextStepEl.classList.add('active');
            this.focusCurrentField();
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —à–∞–≥–æ–≤
            if (step === 9) { // –®–∞–≥ "–¶–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è"
                this.setupColorHandlers();
                this.initColorSelection();
            } else if (step === 10) { // –®–∞–≥ "–í–∞—à–∏ —Ñ–æ—Ç–æ"
                this.setupPhotoHandlers();
                this.renderPhotos();
            }
        }
    }

    validateStep() {
        switch(this.app.state.currentStep) {
            case 1:
                if (!document.getElementById('userName').value.trim()) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.');
                    return false;
                }
                return true;
            case 2:
                if (!this.app.state.userData.gender) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª.');
                    return false;
                }
                return true;
            case 3:
                const age = parseInt(document.getElementById('userAge').value);
                if (isNaN(age) || age < this.app.config.minAge || age > this.app.config.maxAge) {
                    alert(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç ${this.app.config.minAge} –¥–æ ${this.app.config.maxAge} –ª–µ—Ç).`);
                    return false;
                }
                return true;
            case 5: // –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è, –Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ handleNextStep
                if (!document.getElementById('userCity').value.trim()) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.');
                    return false;
                }
                return true;
            case 6:
                if (this.app.state.userData.lookingFor.length === 0) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ.');
                    return false;
                }
                return true;
            case 7:
                if (this.app.state.userData.interests.length === 0) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.');
                    return false;
                }
                return true;
            case 8:
                if (!this.app.state.userData.preference) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ.');
                    return false;
                }
                return true;
            // –î–ª—è –Ω–æ–≤—ã—Ö —à–∞–≥–æ–≤ 9, 10, 11 –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –∫—Ä–æ–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            default:
                return true;
        }
    }

    saveStepData() {
        switch(this.app.state.currentStep) {
            case 1:
                this.app.state.userData.name = document.getElementById('userName').value.trim();
                break;
            case 3:
                this.app.state.userData.age = document.getElementById('userAge').value;
                break;
            case 4:
                this.app.state.userData.zodiacSign = document.getElementById('userZodiac').value;
                break;
            case 5:
                this.app.state.userData.city = document.getElementById('userCity').value.trim();
                // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ app.js –ø–æ—Å–ª–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                break;
            case 11: // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                this.app.state.userData.description = document.getElementById('userDescription').value.trim();
                break;
        }
    }

    focusCurrentField() {
        const activeStep = document.querySelector('.form-step.active');
        const input = activeStep?.querySelector('input:not([type="hidden"]), textarea, select');
        input?.focus();
    }

    saveProfile() {
        if (!this.validateStep()) return;
        this.saveStepData();
        
        localStorage.setItem('datingProfile', JSON.stringify(this.app.state.userData));
        this.app.switchScreen('profile');
    }
}

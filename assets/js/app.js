class DatingApp {
    constructor() {
        this.config = {
            colors: ['#FF6B6B', '#4ECDC4', '#4A64BF', '#FDCB6E', '#A05195', '#2ECC71', '#E74C3C', '#3498DB', '#9B59B6', '#1ABC9C', '#F1C40F', '#E67E22'],
            maxInterests: 5,
            minAge: 18,
            maxAge: 100,
            interests: [
                { id: 'music', name: '–ú—É–∑—ã–∫–∞', emoji: 'üéµ' },
                { id: 'sports', name: '–°–ø–æ—Ä—Ç', emoji: '‚öΩ' },
                { id: 'books', name: '–ö–Ω–∏–≥–∏', emoji: 'üìö' },
                { id: 'travel', name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', emoji: '‚úàÔ∏è' },
                { id: 'art', name: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', emoji: 'üé®' },
                { id: 'games', name: '–ò–≥—Ä—ã', emoji: 'üéÆ' },
                { id: 'cooking', name: '–ö—É–ª–∏–Ω–∞—Ä–∏—è', emoji: 'üç≥' },
                { id: 'photography', name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', 'emoji': 'üì∑' },
                { id: 'movies', name: '–ö–∏–Ω–æ', emoji: 'üé¨' },
                { id: 'nature', name: '–ü—Ä–∏—Ä–æ–¥–∞', emoji: 'üå≥' },
                { id: 'technology', name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', emoji: 'üíª' },
                { id: 'fashion', name: '–ú–æ–¥–∞', emoji: 'üëó' }
            ],
            lookingForOptions: [
                { id: 'friendship', name: '–î—Ä—É–∂–±–∞', emoji: 'ü§ù' },
                { id: 'dating', name: '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', emoji: 'üíë' },
                { id: 'serious', name: '–°–µ—Ä—å—ë–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', emoji: 'üíç' },
                { id: 'networking', name: '–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥', emoji: 'üëî' },
                { id: 'travel', name: '–°–ø—É—Ç–Ω–∏–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π', emoji: '‚úàÔ∏è' }
            ],
            preferenceOptions: [
                { id: 'male', name: '–ú—É–∂—á–∏–Ω', emoji: 'üë®' },
                { id: 'female', name: '–ñ–µ–Ω—â–∏–Ω', emoji: 'üë©' },
                { id: 'both', name: '–í—Å–µ—Ö', emoji: 'üöª' }
            ],
            zodiacSigns: [
                { id: 'aquarius', name: '–í–æ–¥–æ–ª–µ–π', emoji: '‚ôí', start: '01-20', end: '02-18' },
                { id: 'pisces', name: '–†—ã–±—ã', emoji: '‚ôì', start: '02-19', end: '03-20' },
                { id: 'aries', name: '–û–≤–µ–Ω', emoji: '‚ôà', start: '03-21', end: '04-19' },
                { id: 'taurus', name: '–¢–µ–ª–µ—Ü', emoji: '‚ôâ', start: '04-20', end: '05-20' },
                { id: 'gemini', name: '–ë–ª–∏–∑–Ω–µ—Ü—ã', emoji: '‚ôä', start: '05-21', end: '06-20' },
                { id: 'cancer', name: '–†–∞–∫', emoji: '‚ôã', start: '06-21', end: '07-22' },
                { id: 'leo', name: '–õ–µ–≤', emoji: '‚ôå', start: '07-23', end: '08-22' },
                { id: 'virgo', name: '–î–µ–≤–∞', emoji: '‚ôç', start: '08-23', end: '09-22' },
                { id: 'libra', name: '–í–µ—Å—ã', emoji: '‚ôé', start: '09-23', end: '10-22' },
                { id: 'scorpio', name: '–°–∫–æ—Ä–ø–∏–æ–Ω', emoji: '‚ôè', start: '10-23', end: '11-21' },
                { id: 'sagittarius', name: '–°—Ç—Ä–µ–ª–µ—Ü', emoji: '‚ôê', start: '11-22', end: '12-21' },
                { id: 'capricorn', name: '–ö–æ–∑–µ—Ä–æ–≥', emoji: '‚ôë', start: '12-22', end: '01-19' }
            ],
            // –ù–û–í–´–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –î–õ–Ø –†–ê–°–®–ò–†–ï–ù–ù–´–• –ü–û–õ–ï–ô
            badHabitsOptions: [
                { id: 'none', name: '–ù–µ—Ç', emoji: 'üòá' },
                { id: 'alcohol', name: '–ê–ª–∫–æ–≥–æ–ª—å', emoji: 'üç∫' },
                { id: 'smoking', name: '–ö—É—Ä–µ–Ω–∏–µ', emoji: 'üö¨' },
                { id: 'both', name: '–ò —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ', emoji: 'üòà' }
            ],
            childrenOptions: [
                { id: 'no_children', name: '–ù–µ—Ç –¥–µ—Ç–µ–π', emoji: 'üö´üë∂' },
                { id: 'has_children', name: '–ï—Å—Ç—å –¥–µ—Ç–∏', emoji: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' },
                { id: 'wants_children', name: '–•–æ—á—É –¥–µ—Ç–µ–π', emoji: 'ü§∞' },
                { id: 'does_not_want_children', name: '–ù–µ —Ö–æ—á—É –¥–µ—Ç–µ–π', emoji: 'üôÖ‚Äç‚ôÄÔ∏èüë∂' }
            ],
            petsOptions: [
                { id: 'no_pets', name: '–ù–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö', emoji: 'üêæüö´' },
                { id: 'cat', name: '–ö–æ—à–∫–∞', emoji: 'üê±' },
                { id: 'dog', name: '–°–æ–±–∞–∫–∞', emoji: 'üê∂' },
                { id: 'other_pets', name: '–î—Ä—É–≥–∏–µ', emoji: 'üê†' }
            ],
            languagesOptions: [ // –ü—Ä–∏–º–µ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —è–∑—ã–∫–æ–≤
                { id: 'russian', name: '–†—É—Å—Å–∫–∏–π', emoji: 'üá∑üá∫' },
                { id: 'english', name: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', emoji: 'üá¨üáß' },
                { id: 'spanish', name: '–ò—Å–ø–∞–Ω—Å–∫–∏–π', emoji: 'üá™üá∏' },
                { id: 'german', name: '–ù–µ–º–µ—Ü–∫–∏–π', emoji: 'üá©üá™' },
                { id: 'french', name: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', emoji: 'üá´üá∑' },
                { id: 'chinese', name: '–ö–∏—Ç–∞–π—Å–∫–∏–π', emoji: 'üá®üá≥' }
            ],
            datingGoalsOptions: [ // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
                { id: 'long_term_relationship', name: '–°–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', emoji: '‚ù§Ô∏è‚Äçüî•' },
                { id: 'short_term_dating', name: '–ù–µ–¥–æ–ª–≥–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è', emoji: 'ü•Ç' },
                { id: 'new_friends', name: '–ù–æ–≤—ã–µ –¥—Ä—É–∑—å—è', emoji: 'ü´Ç' },
                { id: 'casual_fun', name: '–õ–µ–≥–∫–æ–µ –æ–±—â–µ–Ω–∏–µ', emoji: 'ü•≥' },
                { id: 'marriage', name: '–ë—Ä–∞–∫', emoji: 'üë∞‚Äç‚ôÄÔ∏è' },
                { id: 'travel_buddy', name: '–°–ø—É—Ç–Ω–∏–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π', emoji: '‚úàÔ∏è' },
                { id: 'hobby_partner', name: '–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ —Ö–æ–±–±–∏', emoji: 'üé®' }
            ],
            // –ù–û–í–´–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –î–õ–Ø –õ–ï–î–û–ö–û–õ–û–í –ò –í–û–ü–†–û–°–û–í
            icebreakers: [
                { id: 'fact_about_me', type: 'game', text: '–û—Ç–ø—Ä–∞–≤—å {partnerName} —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ —Å–µ–±–µ.' },
                { id: 'two_truths_one_lie', type: 'game', text: '–°—ã–≥—Ä–∞–π—Ç–µ –≤ "–î–≤–µ –ø—Ä–∞–≤–¥—ã –∏ –æ–¥–Ω–∞ –ª–æ–∂—å".' },
                { id: 'ideal_weekend', type: 'question', text: '–¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π?' },
                { id: 'never_again', type: 'question', text: '–ß—Ç–æ —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–µ–ª–∞–µ—à—å —Å–Ω–æ–≤–∞?' },
                { id: 'favorite_movie', type: 'question', text: '–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º –∏ –ø–æ—á–µ–º—É?' },
                { id: 'dream_travel', type: 'question', text: '–ö—É–¥–∞ –±—ã —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è(–ª–∞—Å—å) –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –µ—Å–ª–∏ –±—ã –º–æ–≥(–ª–∞)?' },
                { id: 'hidden_talent', type: 'question', text: '–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Å–∫—Ä—ã—Ç—ã–π —Ç–∞–ª–∞–Ω—Ç?' },
                { id: 'best_advice', type: 'question', text: '–ö–∞–∫–æ–π —Å–∞–º—ã–π –ª—É—á—à–∏–π —Å–æ–≤–µ—Ç —Ç—ã –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–æ–ª—É—á–∞–ª(–∞)?' },
                { id: 'morning_routine', type: 'question', text: '–û–ø–∏—à–∏ —Å–≤–æ–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ —É—Ç—Ä–æ.' },
                { id: 'superpower', type: 'question', text: '–ï—Å–ª–∏ –±—ã —É —Ç–µ–±—è –±—ã–ª–∞ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫–∞–∫–∞—è –±—ã —ç—Ç–æ –±—ã–ª–∞?' },
                { id: 'desert_island_book', type: 'question', text: '–ö–∞–∫—É—é –æ–¥–Ω—É –∫–Ω–∏–≥—É —Ç—ã –±—ã –≤–∑—è–ª(–∞) –Ω–∞ –Ω–µ–æ–±–∏—Ç–∞–µ–º—ã–π –æ—Å—Ç—Ä–æ–≤?' },
                { id: 'first_thing_after_win', type: 'question', text: '–ß—Ç–æ –ø–µ—Ä–≤–æ–µ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å, –µ—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–µ—à—å –≤ –ª–æ—Ç–µ—Ä–µ—é?' },
                { id: 'childhood_dream', type: 'question', text: '–ö–µ–º —Ç—ã –º–µ—á—Ç–∞–ª(–∞) —Å—Ç–∞—Ç—å –≤ –¥–µ—Ç—Å—Ç–≤–µ?' },
                { id: 'favorite_food', type: 'question', text: '–ö–∞–∫–æ–µ —Ç–≤–æ–µ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ –∏ –ø–æ—á–µ–º—É?' },
                { id: 'learn_new_skill', type: 'question', text: '–ö–∞–∫–æ–π –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã –æ—Å–≤–æ–∏—Ç—å?' },
            ]
        };

        this.state = {
            currentScreen: 'main',
            userData: {
                name: '',
                gender: '',
                age: '',
                dob: { day: '', month: '', year: '' },
                zodiacSign: null,
                city: '',
                description: '',
                interests: [],
                lookingFor: [],
                preference: 'both',
                profileColor: '#FF6B6B', // Default color
                // –ù–û–í–´–ï –ü–û–õ–Ø –ü–†–û–§–ò–õ–Ø
                education: '',
                profession: '',
                badHabits: [], // –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
                children: '', // –í—ã–±–æ—Ä –∏–∑ –æ–ø—Ü–∏–π
                pets: [], // –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
                languages: [], // –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
                datingGoals: [], // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
            },
            suggestedProfiles: [],
            currentLanguage: 'ru', // Default language
            unreadMessagesCount: 0, // –ù–û–í–û–ï: –°—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            blockedUsers: [], // –ù–û–í–û–ï: –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            // likedByUsers: [], // –£–î–ê–õ–ï–ù–û: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ
        };

        this.translations = {
            ru: {
                loadingTitle: '–¢–æ—á–∫–∞–°—Ö–æ–¥–∞',
                loadingSubtitle: '–ú–µ—Å—Ç–æ, –≥–¥–µ —Å–ª–∏–≤–∞—é—Ç—Å—è –≤–∞—à–∏ –ø—É—Ç–∏',
                profile: '–ü—Ä–æ—Ñ–∏–ª—å',
                matches: '–ê–Ω–∫–µ—Ç—ã',
                chat: '–ß–∞—Ç',
                settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                // likedBy: '–õ–∞–π–∫–Ω—É–ª–∏', // –£–î–ê–õ–ï–ù–û
                registrationTitle: '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
                registrationDescription: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.',
                yourName: '–í–∞—à–µ –∏–º—è',
                next: '–î–∞–ª–µ–µ',
                back: '–ù–∞–∑–∞–¥',
                male: '–ú—É–∂—á–∏–Ω–∞',
                female: '–ñ–µ–Ω—â–∏–Ω–∞',
                yourCity: '–í–∞—à –≥–æ—Ä–æ–¥',
                yourDob: '–í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
                day: '–î–µ–Ω—å',
                month: '–ú–µ—Å—è—Ü',
                year: '–ì–æ–¥',
                aquarius: '–í–æ–¥–æ–ª–µ–π',
                pisces: '–†—ã–±—ã',
                aries: '–û–≤–µ–Ω',
                taurus: '–¢–µ–ª–µ—Ü',
                gemini: '–ë–ª–∏–∑–Ω–µ—Ü—ã',
                cancer: '–†–∞–∫',
                leo: '–õ–µ–≤',
                virgo: '–î–µ–≤–∞',
                libra: '–í–µ—Å—ã',
                scorpio: '–°–∫–æ—Ä–ø–∏–æ–Ω',
                sagittarius: '–°—Ç—Ä–µ–ª–µ—Ü',
                capricorn: '–ö–æ–∑–µ—Ä–æ–≥',
                whatAreYouLookingFor: '–ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ?',
                friendship: '–î—Ä—É–∂–±–∞',
                dating: '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
                serious: '–°–µ—Ä—å—ë–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
                networking: '–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥',
                travel: '–°–ø—É—Ç–Ω–∏–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π',
                yourInterests: '–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã',
                music: '–ú—É–∑—ã–∫–∞',
                sports: '–°–ø–æ—Ä—Ç',
                books: '–ö–Ω–∏–≥–∏',
                art: '–ò—Å–∫—É—Å—Å—Ç–≤–æ',
                games: '–ò–≥—Ä—ã',
                cooking: '–ö—É–ª–∏–Ω–∞—Ä–∏—è',
                photography: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
                movies: '–ö–∏–Ω–æ',
                nature: '–ü—Ä–∏—Ä–æ–¥–∞',
                technology: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
                fashion: '–ú–æ–¥–∞',
                whoAreYouLookingFor: '–ö–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ?',
                both: '–í—Å–µ—Ö',
                profileColor: '–¶–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è',
                orChooseYourColor: '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ü–≤–µ—Ç',
                aboutYou: '–û —Å–µ–±–µ',
                aboutYouPlaceholder: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö, –º–µ—á—Ç–∞—Ö...',
                saveProfile: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
                noDescription: '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.',
                noData: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                noLookingFor: '–ù–µ —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ –∏—â–µ—Ç',
                noInterests: '–ò–Ω—Ç–µ—Ä–µ—Å—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
                noPhotos: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
                lastActiveToday: '–ë—ã–ª–∞ —Å–µ–≥–æ–¥–Ω—è',
                lastActiveYesterday: '–ë—ã–ª–∞ –≤—á–µ—Ä–∞',
                lastActiveThisWeek: '–ë—ã–ª–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ',
                lastActiveRecently: '–ë—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ',
                km: '–∫–º',
                noNewProfiles: '–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!',
                backToProfile: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å',
                match: '–ú—ç—Ç—á!',
                youLiked: '–í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è(–ª–∞—Å—å) {name}!',
                likeSent: '–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
                youLikedName: '–í—ã –ª–∞–π–∫–Ω—É–ª–∏ {name}!',
                superlikeSent: '–°—É–ø–µ—Ä–ª–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
                youSuperlikedName: '–í—ã —Å—É–ø–µ—Ä–ª–∞–π–∫–Ω—É–ª–∏ {name}!',
                writeMessage: '–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                continueSwiping: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–∞–π–ø–∞—Ç—å',
                yourChats: '–í–∞—à–∏ —á–∞—Ç—ã',
                yourChatsDescription: '–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏.',
                noActiveChats: '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–Ω–∫–µ—Ç—ã"!',
                typeMessage: '–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...',
                messageRead: '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ',
                messageDelivered: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
                confirmClearData: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
                clearProfileData: '–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è',
                invalidDate: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≥–æ–¥.',
                fillAllFieldsAlert: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ.',
                maxInterestsAlert: '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {maxInterests} –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.',
                education: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                profession: '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
                yourEducation: '–í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                yourProfession: '–í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è',
                yourBadHabits: '–í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏',
                none: '–ù–µ—Ç',
                alcohol: '–ê–ª–∫–æ–≥–æ–ª—å',
                smoking: '–ö—É—Ä–µ–Ω–∏–µ',
                both: '–ò —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ',
                yourChildrenStatus: '–î–µ—Ç–∏',
                no_children: '–ù–µ—Ç –¥–µ—Ç–µ–π',
                has_children: '–ï—Å—Ç—å –¥–µ—Ç–∏',
                wants_children: '–•–æ—á—É –¥–µ—Ç–µ–π',
                does_not_want_children: '–ù–µ —Ö–æ—á—É –¥–µ—Ç–µ–π',
                yourPets: '–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ',
                no_pets: '–ù–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö',
                cat: '–ö–æ—à–∫–∞',
                dog: '–°–æ–±–∞–∫–∞',
                other_pets: '–î—Ä—É–≥–∏–µ',
                yourLanguages: '–Ø–∑—ã–∫–∏',
                russian: '–†—É—Å—Å–∫–∏–π',
                english: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
                spanish: '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
                german: '–ù–µ–º–µ—Ü–∫–∏–π',
                french: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
                chinese: '–ö–∏—Ç–∞–π—Å–∫–∏–π',
                yourDatingGoals: '–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞',
                long_term_relationship: '–°–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
                short_term_dating: '–ù–µ–¥–æ–ª–≥–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è',
                new_friends: '–ù–æ–≤—ã–µ –¥—Ä—É–∑—å—è',
                casual_fun: '–õ–µ–≥–∫–æ–µ –æ–±—â–µ–Ω–∏–µ',
                marriage: '–ë—Ä–∞–∫',
                travel_buddy: '–°–ø—É—Ç–Ω–∏–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π',
                hobby_partner: '–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ —Ö–æ–±–±–∏',
                sendPhoto: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ',
                sendEmoji: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏',
                blockUser: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                confirmBlockUser: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å {name}? –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –µ–≥–æ/–µ–µ –∞–Ω–∫–µ—Ç—É –∏ —Å–æ–æ–±—â–µ–Ω–∏—è.',
                userBlocked: '{name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(–∞).',
                // likedByTitle: '–ö—Ç–æ –º–µ–Ω—è –ª–∞–π–∫–Ω—É–ª', // –£–î–ê–õ–ï–ù–û
                // likedByDescription: '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å, –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –ª–∞–π–∫.', // –£–î–ê–õ–ï–ù–û
                // noLikedByMessage: '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –ª–∞–π–∫. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–≤–∞–π–ø–∞—Ç—å!', // –£–î–ê–õ–ï–ù–û
                // likeBack: '–õ–∞–π–∫–Ω—É—Ç—å –≤ –æ—Ç–≤–µ—Ç', // –£–î–ê–õ–ï–ù–û
                // skip: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', // –£–î–ê–õ–ï–ù–û
                icebreakersTitle: '–õ–µ–¥–æ–∫–æ–ª—ã',
                icebreakersDescription: '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏–≥—Ä—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä.',
                cancel: '–û—Ç–º–µ–Ω–∞',
                fact_about_me: '–û—Ç–ø—Ä–∞–≤—å {partnerName} —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ —Å–µ–±–µ.',
                two_truths_one_lie: '–°—ã–≥—Ä–∞–π—Ç–µ –≤ "–î–≤–µ –ø—Ä–∞–≤–¥—ã –∏ –æ–¥–Ω–∞ –ª–æ–∂—å".',
                ideal_weekend: '–¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π?',
                never_again: '–ß—Ç–æ —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–µ–ª–∞–µ—à—å —Å–Ω–æ–≤–∞?',
                favorite_movie: '–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º –∏ –ø–æ—á–µ–º—É?',
                dream_travel: '–ö—É–¥–∞ –±—ã —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è(–ª–∞—Å—å) –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –µ—Å–ª–∏ –±—ã –º–æ–≥(–ª–∞)?',
                hidden_talent: '–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Å–∫—Ä—ã—Ç—ã–π —Ç–∞–ª–∞–Ω—Ç?',
                best_advice: '–ö–∞–∫–æ–π —Å–∞–º—ã–π –ª—É—á—à–∏–π —Å–æ–≤–µ—Ç —Ç—ã –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–æ–ª—É—á–∞–ª(–∞)?',
                morning_routine: '–û–ø–∏—à–∏ —Å–≤–æ–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ —É—Ç—Ä–æ.',
                superpower: '–ï—Å–ª–∏ –±—ã —É —Ç–µ–±—è –±—ã–ª–∞ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫–∞–∫–∞—è –±—ã —ç—Ç–æ –±—ã–ª–∞?',
                desert_island_book: '–ö–∞–∫—É—é –æ–¥–Ω—É –∫–Ω–∏–≥—É —Ç—ã –±—ã –≤–∑—è–ª(–∞) –Ω–∞ –Ω–µ–æ–±–∏—Ç–∞–µ–º—ã–π –æ—Å—Ç—Ä–æ–≤?',
                first_thing_after_win: '–ß—Ç–æ –ø–µ—Ä–≤–æ–µ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å, –µ—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–µ—à—å –≤ –ª–æ—Ç–µ—Ä–µ—é?',
                childhood_dream: '–ö–µ–º —Ç—ã –º–µ—á—Ç–∞–ª(–∞) —Å—Ç–∞—Ç—å –≤ –¥–µ—Ç—Å—Ç–≤–µ?',
                favorite_food: '–ö–∞–∫–æ–µ —Ç–≤–æ–µ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ –∏ –ø–æ—á–µ–º—É?' ,
                learn_new_skill: '–ö–∞–∫–æ–π –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã –æ—Å–≤–æ–∏—Ç—å?',
                sendIcebreaker: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–µ–¥–æ–∫–æ–ª',
                settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', // –î–æ–±–∞–≤–ª–µ–Ω–æ
                languageSelection: '–í—ã–±–æ—Ä —è–∑—ã–∫–∞', // –î–æ–±–∞–≤–ª–µ–Ω–æ
                selectLanguage: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', // –î–æ–±–∞–≤–ª–µ–Ω–æ
                profileColorSettings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è', // –î–æ–±–∞–≤–ª–µ–Ω–æ
            },
            en: {
                loadingTitle: 'Meeting Point',
                loadingSubtitle: 'Where your paths converge',
                profile: 'Profile',
                matches: 'Matches',
                chat: 'Chat',
                settings: 'Settings',
                // likedBy: 'Liked By', // –£–î–ê–õ–ï–ù–û
                registrationTitle: 'Create Your Profile',
                registrationDescription: 'Tell us a little about yourself so we can find your perfect matches.',
                yourName: 'Your Name',
                next: 'Next',
                back: 'Back',
                male: 'Male',
                female: 'Female',
                yourCity: 'Your City',
                yourDob: 'Your Date of Birth',
                day: 'Day',
                month: 'Month',
                year: 'Year',
                aquarius: 'Aquarius',
                pisces: 'Pisces',
                aries: 'Aries',
                taurus: 'Taurus',
                gemini: 'Gemini',
                cancer: 'Cancer',
                leo: 'Leo',
                virgo: 'Virgo',
                libra: 'Libra',
                scorpio: 'Scorpio',
                sagittarius: 'Sagittarius',
                capricorn: 'Capricorn',
                whatAreYouLookingFor: 'What are you looking for?',
                friendship: 'Friendship',
                dating: 'Dating',
                serious: 'Serious Relationship',
                networking: 'Networking',
                travel: 'Travel Buddy',
                yourInterests: 'Your Interests',
                music: 'Music',
                sports: 'Sports',
                books: 'Books',
                art: 'Art',
                games: 'Games',
                cooking: 'Cooking',
                photography: 'Photography',
                movies: 'Movies',
                nature: 'Nature',
                technology: 'Technology',
                fashion: 'Fashion',
                whoAreYouLookingFor: 'Who are you looking for?',
                both: 'Everyone',
                profileColor: 'Profile Color',
                orChooseYourColor: 'Or choose your own color',
                aboutYou: 'About You',
                aboutYouPlaceholder: 'Tell us about yourself, your hobbies, dreams...',
                saveProfile: 'Save Profile',
                noDescription: 'No description provided.',
                noData: 'No data',
                noLookingFor: 'Not specified what they are looking for',
                noInterests: 'No interests specified',
                noPhotos: 'No photos available',
                lastActiveToday: 'Online today',
                lastActiveYesterday: 'Online yesterday',
                lastActiveThisWeek: 'Online this week',
                lastActiveRecently: 'Online recently',
                km: 'km',
                noNewProfiles: 'No new profiles for now. Try again later!',
                backToProfile: 'Back to Profile',
                match: 'Match!',
                youLiked: 'You matched with {name}!',
                likeSent: 'Like Sent!',
                youLikedName: 'You liked {name}!',
                superlikeSent: 'Superlike Sent!',
                youSuperlikedName: 'You superliked {name}!',
                writeMessage: 'Write a message',
                continueSwiping: 'Continue Swiping',
                yourChats: 'Your Chats',
                yourChatsDescription: 'Here you will see your conversations.',
                noActiveChats: 'You have no active chats yet. Start swiping in the "Matches" section!',
                typeMessage: 'Type a message...',
                messageRead: 'Read',
                messageDelivered: 'Delivered',
                confirmClearData: 'Are you sure you want to delete all profile data? This action is irreversible.',
                clearProfileData: 'Clear Profile Data',
                invalidDate: 'Invalid date of birth. Please check day, month, and year.',
                fillAllFieldsAlert: 'Please fill in this field.',
                maxInterestsAlert: 'You can select no more than {maxInterests} interests.',
                education: 'Education',
                profession: 'Profession',
                yourEducation: 'Your Education',
                yourProfession: 'Your Profession',
                yourBadHabits: 'Bad Habits',
                none: 'None',
                alcohol: 'Alcohol',
                smoking: 'Smoking',
                both: 'Both',
                yourChildrenStatus: 'Children',
                no_children: 'No children',
                has_children: 'Has children',
                wants_children: 'Wants children',
                does_not_want_children: 'Doesn\'t want children',
                yourPets: 'Pets',
                no_pets: 'No pets',
                cat: 'Cat',
                dog: 'Dog',
                other_pets: 'Other',
                yourLanguages: 'Languages',
                russian: 'Russian',
                english: 'English',
                spanish: 'Spanish',
                german: 'German',
                french: 'French',
                chinese: 'Chinese',
                yourDatingGoals: 'Dating Goals',
                long_term_relationship: 'Long-term relationship',
                short_term_dating: 'Short-term dating',
                new_friends: 'New friends',
                casual_fun: 'Casual fun',
                marriage: 'Marriage',
                travel_buddy: 'Travel buddy',
                hobby_partner: 'Hobby partner',
                sendPhoto: 'Send Photo',
                sendEmoji: 'Send Emoji',
                blockUser: 'Block User',
                confirmBlockUser: 'Are you sure you want to block {name}? You will no longer see their profile or messages.',
                userBlocked: '{name} has been blocked.',
                // likedByTitle: 'Liked By', // –£–î–ê–õ–ï–ù–û
                // likedByDescription: 'Here you can see who liked you.', // –£–î–ê–õ–ï–ù–û
                // noLikedByMessage: 'No one has liked you yet. Keep swiping!', // –£–î–ê–õ–ï–ù–û
                // likeBack: 'Like Back', // –£–î–ê–õ–ï–ù–û
                // skip: 'Skip', // –£–î–ê–õ–ï–ù–û
                icebreakersTitle: 'Icebreakers',
                icebreakersDescription: 'Choose a question or game to start the conversation.',
                cancel: 'Cancel',
                fact_about_me: 'Send {partnerName} a random fact about yourself.',
                two_truths_one_lie: 'Play "Two truths and a lie".',
                ideal_weekend: 'What\'s your ideal weekend?',
                never_again: 'What would you never do again?',
                favorite_movie: 'What\'s your favorite movie and why?',
                dream_travel: 'Where would you travel right now if you could?',
                hidden_talent: 'Do you have any hidden talents?',
                best_advice: 'What\'s the best advice you\'ve ever received?',
                morning_routine: 'Describe your ideal morning.',
                superpower: 'If you had a superpower, what would it be?',
                desert_island_book: 'What one book would you take to a desert island?',
                first_thing_after_win: 'What\'s the first thing you\'d do if you won the lottery?',
                childhood_dream: 'What did you dream of becoming as a child?',
                favorite_food: 'What\'s your favorite food and why?',
                learn_new_skill: 'What new skill would you like to learn?',
                sendIcebreaker: 'Send Icebreaker',
                settings: 'Settings', // –î–æ–±–∞–≤–ª–µ–Ω–æ
                languageSelection: 'Language Selection', // –î–æ–±–∞–≤–ª–µ–Ω–æ
                selectLanguage: 'Select Language', // –î–æ–±–∞–≤–ª–µ–Ω–æ
                profileColorSettings: 'Profile Color Settings', // –î–æ–±–∞–≤–ª–µ–Ω–æ
            }
        };

        this.initElements();
        this.formHandler = new FormHandler(this);
        this.profileHandler = new ProfileHandler(this);
        this.uiHandler = new UIHandler(this);
        this.matchHandler = new MatchHandler(this); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MatchHandler –∑–¥–µ—Å—å
        // ChatHandler and SettingsHandler will be lazy loaded
        this.chatHandler = null;
        this.settingsHandler = null;

        this.bindEvents();
        this.checkSavedProfile();
        this.setLanguage(this.state.currentLanguage);
        this.setAppThemeColor(this.state.userData.profileColor); // Apply saved color on load
        this.showLoadingScreen();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web Apps API
        if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
            Telegram.WebApp.ready();
            Telegram.WebApp.expand(); // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ Telegram Mini App
            Telegram.WebApp.setBackgroundColor(getComputedStyle(document.documentElement).getPropertyValue('--background'));
            Telegram.WebApp.setHeaderColor(getComputedStyle(document.documentElement).getPropertyValue('--surface'));
        }
    }

    showLoadingScreen() {
        this.uiHandler.initLogoAnimation();

        const loadingScreen = document.getElementById('loadingScreen');
        const appContainer = document.getElementById('appContainer');

        // Ensure loading screen is visible and covers the whole screen
        loadingScreen.style.display = 'flex';
        loadingScreen.style.position = 'fixed';
        loadingScreen.style.top = '0';
        loadingScreen.style.left = '0';
        loadingScreen.style.width = '100%';
        loadingScreen.style.height = '100%';
        loadingScreen.style.opacity = '1'; // Ensure opacity is 1 when showing

        // Make sure loading text elements are visible for animation
        const loadingTitle = document.getElementById('loadingTitle');
        const loadingSubtitle = document.getElementById('loadingSubtitle');

        // Set initial state for animation
        loadingTitle.style.opacity = '0';
        loadingTitle.style.transform = 'translateY(20px) scale(0.95)';
        loadingSubtitle.style.opacity = '0';
        loadingSubtitle.style.transform = 'translateY(20px) scale(0.95)';

        // Start logo animation first
        setTimeout(() => {
            // Then fade in title and subtitle with staggered delays
            loadingTitle.style.animation = 'fadeInScale 1s ease-out forwards';
        }, 300); // Delay for title after logo animation starts (reduced from 1500)

        setTimeout(() => {
            loadingSubtitle.style.animation = 'fadeInScale 1s ease-out forwards';
        }, 600); // Delay for subtitle after title starts (reduced from 1800)

        setTimeout(() => {
            loadingScreen.style.opacity = '0';

            loadingScreen.addEventListener('transitionend', () => {
                loadingScreen.style.display = 'none';
                // Reset fixed positioning when hidden
                loadingScreen.style.position = '';
                loadingScreen.style.top = '';
                loadingScreen.style.left = '';
                loadingScreen.style.width = '';
                loadingScreen.style.height = '';

                appContainer.style.display = 'flex';
                this.switchScreen(this.state.currentScreen);
            }, { once: true });
        }, 2000); // Total duration before hiding loading screen (reduced from 3500)
    }

    initElements() {
        this.elements = {
            registrationForm: document.getElementById('registrationForm'),
            profileView: document.getElementById('profileView'),
            matchScreen: document.getElementById('matchScreen'),
            chatScreen: document.getElementById('chatScreen'),
            settingsScreen: document.getElementById('settingsScreen'),
            // likedByScreen: document.getElementById('likedByScreen'), // –£–î–ê–õ–ï–ù–û
            topNavigation: document.getElementById('topNavigation'),
            navButtons: document.querySelectorAll('.nav-btn'),
            matchSuccessModal: document.getElementById('matchSuccessModal'),
            matchModalIcon: document.getElementById('matchModalIcon'),
            matchModalTitle: document.getElementById('matchModalTitle'),
            matchModalMessage: document.getElementById('matchModalMessage'),
            matchModalMyAvatar: document.getElementById('matchModalMyAvatar'),
            matchModalPartnerAvatar: document.getElementById('matchModalPartnerAvatar'),
            matchModalChatBtn: document.getElementById('matchModalChatBtn'),
            matchModalContinueBtn: document.getElementById('matchModalContinueBtn'),
            loadingTitle: document.getElementById('loadingTitle'),
            loadingSubtitle: document.getElementById('loadingSubtitle'),
            navProfileText: document.getElementById('navProfileText'),
            navMatchesText: document.getElementById('navMatchesText'),
            navChatText: document.getElementById('navChatText'),
            navSettingsText: document.getElementById('navSettingsText'),
            // navLikedByText: document.getElementById('navLikedByText'), // –£–î–ê–õ–ï–ù–û
            dynamicStyles: document.getElementById('dynamic-styles'),

            profileFullModalOverlay: document.getElementById('profileFullModalOverlay'),
            profileFullModalContent: document.getElementById('profileFullModalContent'),
            profileFullModalCloseBtn: document.getElementById('profileFullModalCloseBtn'),
            profileFullModalNameAge: document.getElementById('profileFullModalNameAge'),
            profileFullModalDescriptionShort: document.getElementById('profileFullModalDescriptionShort'),
            profileFullModalDescriptionFull: document.getElementById('profileFullModalDescriptionFull'),
            profileFullModalZodiacSign: document.getElementById('profileFullModalZodiacSign'),
            profileFullModalLookingFor: document.getElementById('profileFullModalLookingFor'),
            profileFullModalInterests: document.getElementById('profileFullModalInterests'),
            profileFullModalScrollableContent: document.getElementById('profileFullModalScrollableContent'),
            profileFullModalEditBtn: document.getElementById('profileFullModalEditBtn'),
            profileFullModalNewProfileBtn: document.getElementById('profileFullModalNewProfileBtn'),
            // –ù–û–í–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ü–†–û–§–ò–õ–Ø
            profileFullModalEducation: document.getElementById('profileFullModalEducation'),
            profileFullModalProfession: document.getElementById('profileFullModalProfession'),
            profileFullModalBadHabits: document.getElementById('profileFullModalBadHabits'),
            profileFullModalChildren: document.getElementById('profileFullModalChildren'),
            profileFullModalPets: document.getElementById('profileFullModalPets'),
            profileFullModalLanguages: document.getElementById('profileFullModalLanguages'),
            profileFullModalDatingGoals: document.getElementById('profileFullModalDatingGoals'),


            // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∞–Ω–∫–µ—Ç—ã
            matchFullModalOverlay: document.getElementById('matchModalOverlay'),
            matchFullModalContent: document.getElementById('matchFullModalContent'),
            matchFullModalCloseBtn: document.getElementById('matchFullModalCloseBtn'),
            matchFullModalNameAge: document.getElementById('matchFullModalNameAge'),
            matchFullModalDescriptionShort: document.getElementById('matchFullModalDescriptionShort'),
            matchFullModalDescriptionFull: document.getElementById('matchFullModalDescriptionFull'),
            matchFullModalZodiacSign: document.getElementById('matchFullModalZodiacSign'),
            matchFullModalLookingFor: document.getElementById('matchFullModalLookingFor'),
            matchFullModalInterests: document.getElementById('matchFullModalInterests'),
            matchFullModalLastActive: document.getElementById('matchFullModalLastActive'),
            matchFullModalDistance: document.getElementById('matchFullModalDistance'),
            matchFullModalActiveDot: document.getElementById('matchFullModalActiveDot'),
            matchFullModalScrollableContent: document.getElementById('matchFullModalScrollableContent'),
            // –ù–û–í–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ê–ù–ö–ï–¢–´
            matchFullModalEducation: document.getElementById('matchFullModalEducation'),
            matchFullModalProfession: document.getElementById('matchFullModalProfession'),
            matchFullModalBadHabits: document.getElementById('matchFullModalBadHabits'),
            matchFullModalChildren: document.getElementById('matchFullModalChildren'),
            matchFullModalPets: document.getElementById('matchFullModalPets'),
            matchFullModalLanguages: document.getElementById('matchFullModalLanguages'),
            matchFullModalDatingGoals: document.getElementById('matchFullModalDatingGoals'),

            // –ù–û–í–û–ï: –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–∞—Ç–∞
            chatNavBtn: document.querySelector('.nav-btn[data-screen="chat"]'),
            chatNotificationBadge: document.getElementById('chatNotificationBadge'),

            // –ù–û–í–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –î–õ–Ø –õ–ï–î–û–ö–û–õ–û–í
            icebreakerModalOverlay: document.getElementById('icebreakerModalOverlay'),
            icebreakerModalCloseBtn: document.getElementById('icebreakerModalCloseBtn'),
            icebreakerModalTitle: document.getElementById('icebreakerModalTitle'),
            icebreakerModalDescription: document.getElementById('icebreakerModalDescription'),
            icebreakerOptionsContainer: document.getElementById('icebreakerOptionsContainer'),
            icebreakerModalCancelBtn: document.getElementById('icebreakerModalCancelBtn'),
        };
    }

    bindEvents() {
        this.elements.navButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const screenName = e.currentTarget.dataset.screen;
                this.switchScreen(screenName);
            });
        });

        const backToProfileFromMatchBtn = document.getElementById('backToProfileFromMatchBtn');
        if (backToProfileFromMatchBtn) {
            backToProfileFromMatchBtn.addEventListener('click', () => this.switchScreen('profile'));
        }

        if (this.elements.matchModalChatBtn) {
            this.elements.matchModalChatBtn.addEventListener('click', () => {
                this.hideMatchSuccessModal();
                this.switchScreen('chat');
                if (this.matchHandler.lastMatchedProfile) {
                    // Ensure chatHandler is loaded before calling openChat
                    this.lazyLoadScript('chat').then(() => {
                        this.chatHandler.addChat(this.matchHandler.lastMatchedProfile);
                        // If we want to immediately open the chat after match
                        this.chatHandler.openChat(this.matchHandler.lastMatchedProfile.id);
                    });
                }
            });
        }
        if (this.elements.matchModalContinueBtn) {
            this.elements.matchModalContinueBtn.addEventListener('click', () => {
                this.hideMatchSuccessModal();
                this.matchHandler.currentIndex++; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é
                this.matchHandler.showNextProfile();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
        if (this.elements.profileFullModalCloseBtn) {
            this.elements.profileFullModalCloseBtn.addEventListener('click', () => this.hideProfileFullModal());
        }
        if (this.elements.profileFullModalOverlay) {
            this.elements.profileFullModalOverlay.addEventListener('click', (e) => {
                if (e.target === this.elements.profileFullModalOverlay) {
                    this.hideProfileFullModal();
                }
            });
        }
        // –ö–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
        if (this.elements.profileFullModalEditBtn) {
            this.elements.profileFullModalEditBtn.addEventListener('click', () => {
                this.hideProfileFullModal();
                this.switchScreen('registration');
            });
        }
        if (this.elements.profileFullModalNewProfileBtn) {
            this.elements.profileFullModalNewProfileBtn.addEventListener('click', () => {
                if (confirm(this.translate('confirmClearData'))) {
                    this.hideProfileFullModal();
                    this.clearAllData();
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∞–Ω–∫–µ—Ç—ã
        if (this.elements.matchFullModalCloseBtn) {
            this.elements.matchFullModalCloseBtn.addEventListener('click', () => this.hideMatchFullModal());
        }
        if (this.elements.matchFullModalOverlay) {
            this.elements.matchFullModalOverlay.addEventListener('click', (e) => {
                if (e.target === this.elements.matchFullModalOverlay) {
                    this.hideMatchFullModal();
                }
            });
        }

        // –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –õ–ï–î–û–ö–û–õ–û–í
        if (this.elements.icebreakerModalCloseBtn) {
            this.elements.icebreakerModalCloseBtn.addEventListener('click', () => this.hideIcebreakerModal());
        }
        if (this.elements.icebreakerModalOverlay) {
            this.elements.icebreakerModalOverlay.addEventListener('click', (e) => {
                if (e.target === this.elements.icebreakerModalOverlay) {
                    this.hideIcebreakerModal();
                }
            });
        }
        if (this.elements.icebreakerModalCancelBtn) {
            this.elements.icebreakerModalCancelBtn.addEventListener('click', () => this.hideIcebreakerModal());
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ Esc
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                if (this.elements.matchSuccessModal.classList.contains('active')) {
                    this.hideMatchSuccessModal();
                }
                if (this.elements.profileFullModalOverlay.classList.contains('active')) {
                    this.hideProfileFullModal();
                }
                if (this.elements.matchFullModalOverlay.classList.contains('active')) {
                    this.hideMatchFullModal();
                }
                if (this.elements.icebreakerModalOverlay.classList.contains('active')) {
                    this.hideIcebreakerModal();
                }
            }
        });
    }

    checkSavedProfile() {
        const savedProfile = localStorage.getItem('datingProfile');
        const savedLanguage = localStorage.getItem('appLanguage');
        const savedBlockedUsers = localStorage.getItem('blockedUsers'); // –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        // const savedLikedByUsers = localStorage.getItem('datingAppLikedByUsers'); // –£–î–ê–õ–ï–ù–û

        if (savedLanguage) {
            this.state.currentLanguage = savedLanguage;
        }
        if (savedBlockedUsers) { // –ù–û–í–û–ï: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try {
                this.state.blockedUsers = JSON.parse(savedBlockedUsers);
            } catch (e) {
                console.error('Error loading blocked users:', e);
                localStorage.removeItem('blockedUsers');
            }
        }
        // if (savedLikedByUsers) { // –£–î–ê–õ–ï–ù–û
        //     try {
        //         this.state.likedByUsers = JSON.parse(savedLikedByUsers);
        //     } catch (e) {
        //         console.error('Error loading liked by users:', e);
        //         localStorage.removeItem('datingAppLikedByUsers');
        //     }
        // }

        if (savedProfile) {
            try {
                const parsedProfile = JSON.parse(savedProfile);
                // –û–±–Ω–æ–≤–ª—è–µ–º userData, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                this.state.userData = {
                    ...this.state.userData, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
                    ...parsedProfile, // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                };

                if (!Array.isArray(this.state.userData.interests)) {
                    this.state.userData.interests = [];
                }
                if (!Array.isArray(this.state.userData.lookingFor)) {
                    this.state.userData.lookingFor = [];
                }
                if (!this.state.userData.preference) {
                    this.state.userData.preference = 'both';
                }
                if (!this.state.userData.dob) {
                    this.state.userData.dob = { day: '', month: '', year: '' };
                }
                if (!this.state.userData.zodiacSign) {
                    this.state.userData.zodiacSign = null;
                }
                if (!this.state.userData.profileColor) {
                    this.state.userData.profileColor = '#FF6B6B';
                }
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è—Ö
                if (!this.state.userData.education) this.state.userData.education = '';
                if (!this.state.userData.profession) this.state.userData.profession = '';
                if (!Array.isArray(this.state.userData.badHabits)) this.state.userData.badHabits = [];
                if (!this.state.userData.children) this.state.userData.children = '';
                if (!Array.isArray(this.state.userData.pets)) this.state.userData.pets = [];
                if (!Array.isArray(this.state.userData.languages)) this.state.userData.languages = [];
                if (!Array.isArray(this.state.userData.datingGoals)) this.state.userData.datingGoals = [];

                this.state.currentScreen = 'profile';
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', e);
                localStorage.removeItem('datingProfile');
                this.state.currentScreen = 'registration';
            }
        } else {
            this.state.currentScreen = 'registration';
        }
    }

    showProfile() {
        this.profileHandler.showProfile();
    }

    startMatch() {
        this.matchHandler.startMatch();
    }

    // saveLikedByUsers() { // –£–î–ê–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∞–π–∫–Ω—É–≤—à–∏—Ö
    //     localStorage.setItem('datingAppLikedByUsers', JSON.stringify(this.state.likedByUsers));
    // }

    clearAllData() {
        localStorage.removeItem('datingProfile');
        localStorage.removeItem('swipeTutorialShown');
        localStorage.removeItem('appLanguage');
        localStorage.removeItem('blockedUsers'); // –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        // localStorage.removeItem('datingAppLikedByUsers'); // –£–î–ê–õ–ï–ù–û
        localStorage.removeItem('datingAppChats'); // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–æ–≤
        this.state.userData = {
            name: '',
            gender: '',
            age: '',
            dob: { day: '', month: '', year: '' },
            zodiacSign: null,
            city: '',
            description: '',
            interests: [],
            lookingFor: [],
            preference: 'both',
            profileColor: '#FF6B6B',
            // –°–±—Ä–æ—Å –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
            education: '',
            profession: '',
            badHabits: [],
            children: '',
            pets: [],
            languages: [],
            datingGoals: [],
        };
        this.state.blockedUsers = []; // –ù–û–í–û–ï: –°–±—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        // this.state.likedByUsers = []; // –£–î–ê–õ–ï–ù–û
        this.state.unreadMessagesCount = 0; // –ù–û–í–û–ï: –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
        this.updateChatNotificationBadge(); // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞
        // Reset chatHandler if it's loaded
        if (this.chatHandler) {
            this.chatHandler.chats = {};
            this.chatHandler.showChatListScreen(); // Re-render empty chat list
        }
        alert(this.translate('confirmClearData')); // This alert should be replaced with a custom modal
        this.setLanguage('ru');
        this.setAppThemeColor(this.state.userData.profileColor); // Reset theme color
        this.switchScreen('registration');
    }

    async switchScreen(screenName) {
        // Hide all screens first
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
            screen.style.display = 'none';
        });

        // Deactivate all nav buttons
        this.elements.navButtons.forEach(button => {
            button.classList.remove('active');
            button.removeAttribute('tabindex'); // Ensure all nav buttons are focusable
        });

        let targetScreenElement;
        let navButtonToActivate = null;

        // Determine target screen and nav button
        if (screenName === 'registration') {
            targetScreenElement = this.elements.registrationForm;
            this.elements.topNavigation.style.display = 'none';
            this.formHandler.renderForm();
        } else if (screenName === 'profile') {
            targetScreenElement = this.elements.profileView;
            navButtonToActivate = document.querySelector('.nav-btn[data-screen="profile"]');
            this.elements.topNavigation.style.display = 'flex';
            this.profileHandler.showProfile();
        } else if (screenName === 'match') {
            targetScreenElement = this.elements.matchScreen;
            navButtonToActivate = document.querySelector('.nav-btn[data-screen="match"]');
            this.elements.topNavigation.style.display = 'flex';
            this.matchHandler.startMatch();
            this.matchHandler.setupEventListeners();
        } else if (screenName === 'chat') {
            targetScreenElement = this.elements.chatScreen;
            navButtonToActivate = document.querySelector('.nav-btn[data-screen="chat"]');
            this.elements.topNavigation.style.display = 'flex';
            await this.lazyLoadScript('chat');
            this.chatHandler.showChatListScreen();
            this.state.unreadMessagesCount = 0; // Reset unread count when chat is opened
            this.updateChatNotificationBadge();
        } else if (screenName === 'settings') {
            targetScreenElement = this.elements.settingsScreen;
            navButtonToActivate = document.querySelector('.nav-btn[data-screen="settings"]');
            this.elements.topNavigation.style.display = 'flex';
            await this.lazyLoadScript('settings');
            this.settingsHandler.renderSettings();
        }

        // Activate the target screen and nav button
        if (targetScreenElement) {
            targetScreenElement.style.display = 'flex'; // Make it visible for transition
            // Use a small timeout to ensure display:flex is applied before adding 'active'
            setTimeout(() => {
                targetScreenElement.classList.add('active');
            }, 10);
        }
        if (navButtonToActivate) {
            navButtonToActivate.classList.add('active');
        }

        this.state.currentScreen = screenName;
        this.updateTextContent();
    }


    // renderLikedByList() { // –£–î–ê–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –ª–∞–π–∫–Ω—É–≤—à–∏—Ö
    //     const likedByListContainer = document.getElementById('likedByList');
    //     const noLikedByMessage = document.getElementById('noLikedByMessage');
    //     likedByListContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

    //     if (this.state.likedByUsers.length === 0) {
    //         noLikedByMessage.style.display = 'block';
    //     } else {
    //         noLikedByMessage.style.display = 'none';
    //         this.state.likedByUsers.forEach(profile => {
    //             const likedByItem = document.createElement('div');
    //             likedByItem.className = 'liked-by-item';
    //             likedByItem.dataset.profileId = profile.id; // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    //             likedByItem.innerHTML = `
    //                 <div class="liked-by-avatar" style="background-image: url('https://picsum.photos/seed/${profile.id}/80/80');"></div>
    //                 <div class="liked-by-info">
    //                     <div class="liked-by-name">${profile.name}, ${profile.age}</div>
    //                 </div>
    //                 <div class="liked-by-actions">
    //                     <button class="btn btn-like" data-action="like" data-profile-id="${profile.id}">${this.translate('likeBack')}</button>
    //                     <button class="btn btn-secondary" data-action="skip" data-profile-id="${profile.id}">${this.translate('skip')}</button>
    //                 </div>
    //             `;
    //             likedByListContainer.appendChild(likedByItem);

    //             // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    //             likedByItem.querySelector('[data-action="like"]').addEventListener('click', (e) => {
    //                 this.handleLikedByAction(e.target.dataset.profileId, 'like');
    //             });
    //             likedByItem.querySelector('[data-action="skip"]').addEventListener('click', (e) => {
    //                 this.handleLikedByAction(e.target.dataset.profileId, 'skip');
    //             });
    //         });
    //     }
    // }

    // handleLikedByAction(profileId, action) { // –£–î–ê–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö—Ç–æ –º–µ–Ω—è –ª–∞–π–∫–Ω—É–ª"
    //     const profileIndex = this.state.likedByUsers.findIndex(p => p.id === profileId);
    //     if (profileIndex === -1) return;

    //     const profile = this.state.likedByUsers[profileIndex];

    //     if (action === 'like') {
    //         console.log(`–õ–∞–π–∫–Ω—É–ª–∏ –≤ –æ—Ç–≤–µ—Ç: ${profile.name}`);
    //         this.lazyLoadScript('chat').then(() => {
    //             this.chatHandler.addChat(profile); // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç
    //             this.showMatchSuccessModal(profile, 'match'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º—ç—Ç—á–∞
    //         });
    //     } else if (action === 'skip') {
    //         console.log(`–ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏: ${profile.name}`);
    //     }

    //     // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ "–ö—Ç–æ –º–µ–Ω—è –ª–∞–π–∫–Ω—É–ª"
    //     this.state.likedByUsers.splice(profileIndex, 1);
    //     this.saveLikedByUsers();
    //     this.renderLikedByList(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    // }

    async lazyLoadScript(componentName) {
        if (componentName === 'chat' && !this.chatHandler) {
            const scriptElement = document.getElementById('chat-script');
            if (!scriptElement.src) { // Load only if not already loaded
                scriptElement.src = 'assets/js/components/chat.js';
                await new Promise(resolve => {
                    scriptElement.onload = () => {
                        this.chatHandler = new ChatHandler(this);
                        resolve();
                    };
                });
            } else if (!this.chatHandler) { // If src is set but handler not initialized (e.g., after clearAllData)
                this.chatHandler = new ChatHandler(this);
            }
        } else if (componentName === 'settings' && !this.settingsHandler) {
            const scriptElement = document.getElementById('settings-script');
            if (!scriptElement.src) { // Load only if not already loaded
                scriptElement.src = 'assets/js/components/settings.js';
                await new Promise(resolve => {
                    scriptElement.onload = () => {
                        this.settingsHandler = new SettingsHandler(this);
                        resolve();
                    };
                });
            } else if (!this.settingsHandler) { // If src is set but handler not initialized
                this.settingsHandler = new SettingsHandler(this);
            }
        }
    }

    showMatchSuccessModal(profile, type) {
        if (!this.elements.matchSuccessModal) return;

        let title = '';
        let message = '';
        let iconHtml = '';

        if (type === 'match') {
            title = this.translate('match');
            message = this.translate('youLiked', { name: profile.name });
            iconHtml = '‚ù§Ô∏è';
        } else if (type === 'like') {
            title = this.translate('likeSent');
            message = this.translate('youLikedName', { name: profile.name });
            iconHtml = 'üëç';
        } else if (type === 'superlike') {
            title = this.translate('superlikeSent');
            message = this.translate('youSuperlikedName', { name: profile.name });
            iconHtml = '‚ú®';
        }

        this.elements.matchModalIcon.textContent = iconHtml;
        this.elements.matchModalTitle.textContent = title;
        this.elements.matchModalMessage.textContent = message;

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ this.app.state.userData.name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è seed
        const myAvatarSeed = this.state.userData.name || 'my_default_avatar';
        this.elements.matchModalMyAvatar.style.backgroundImage = `url(https://picsum.photos/seed/${myAvatarSeed}/100/100)`;
        this.elements.matchModalPartnerAvatar.style.backgroundImage = `url(https://picsum.photos/seed/${profile.id}/100/100)`;

        this.elements.matchModalChatBtn.textContent = this.translate('writeMessage');
        this.elements.matchModalContinueBtn.textContent = this.translate('continueSwiping');

        this.elements.matchSuccessModal.classList.add('active');
        this.elements.matchSuccessModal.focus(); // Set focus to modal for accessibility
    }

    hideMatchSuccessModal() {
        if (this.elements.matchSuccessModal) {
            this.elements.matchSuccessModal.classList.remove('active');
        }
    }

    showProfileFullModal(profileData) {
        if (!this.elements.profileFullModalOverlay || !this.elements.profileFullModalContent) return;

        let nameAgeText = profileData.name || this.translate('anonymous');
        if (profileData.age) {
            nameAgeText += `, ${profileData.age}`;
        }
        this.elements.profileFullModalNameAge.textContent = nameAgeText;

        const fullDescription = profileData.description || this.translate('noDescription');
        this.elements.profileFullModalDescriptionShort.textContent = fullDescription.split('.')[0] + (fullDescription.includes('.') ? '.' : '');
        if (this.elements.profileFullModalDescriptionShort.textContent.length > 100) {
            this.elements.profileFullModalDescriptionShort.textContent = this.elements.profileFullModalDescriptionShort.textContent.substring(0, 97) + '...';
        }

        this.elements.profileFullModalDescriptionFull.textContent = fullDescription;

        // –ù–û–í–´–ï –ü–û–õ–Ø
        // –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É—è "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        this.elements.profileFullModalEducation.textContent = profileData.education || this.translate('noData');
        this.elements.profileFullModalProfession.textContent = profileData.profession || this.translate('noData');

        this.renderTags(this.elements.profileFullModalBadHabits, profileData.badHabits, this.config.badHabitsOptions, 'bad-habit');
        this.renderSingleTag(this.elements.profileFullModalChildren, profileData.children, this.config.childrenOptions, 'children');
        this.renderTags(this.elements.profileFullModalPets, profileData.pets, this.config.petsOptions, 'pets');
        this.renderTags(this.elements.profileFullModalLanguages, profileData.languages, this.config.languagesOptions, 'language');
        this.renderTags(this.elements.profileFullModalDatingGoals, profileData.datingGoals, this.config.datingGoalsOptions, 'dating-goal');
        // –ö–û–ù–ï–¶ –ù–û–í–´–• –ü–û–õ–ï–ô

        const zodiacContainer = this.elements.profileFullModalZodiacSign;
        const zodiacSign = profileData.zodiacSign;
        if (zodiacSign) {
            zodiacContainer.innerHTML = `
                <div class="zodiac-display">
                    <span class="emoji">${zodiacSign.emoji}</span>
                    ${this.translate(zodiacSign.id)}
                </div>
            `;
        } else {
            zodiacContainer.innerHTML = `<div class="no-data">${this.translate('noData')}</div>`;
        }

        this.renderTags(this.elements.profileFullModalLookingFor, profileData.lookingFor, this.config.lookingForOptions, 'looking-for');
        this.renderTags(this.elements.profileFullModalInterests, profileData.interests, this.config.interests, 'interest');

        this.elements.profileFullModalScrollableContent.scrollTop = 0;

        this.elements.profileFullModalOverlay.classList.add('active');
        this.elements.profileFullModalContent.classList.add('active'); // –î–æ–±–∞–≤–ª–µ–Ω–æ
        document.body.style.overflow = 'hidden';
        this.elements.profileFullModalContent.focus(); // Set focus to modal for accessibility
    }

    hideProfileFullModal() {
        if (this.elements.profileFullModalOverlay && this.elements.profileFullModalContent) {
            this.elements.profileFullModalOverlay.classList.remove('active');
            this.elements.profileFullModalContent.classList.remove('active');
            document.body.style.overflow = '';
        }
    }

    showMatchFullModal(profileData) {
        if (!this.elements.matchFullModalOverlay || !this.elements.matchFullModalContent) return;

        let nameAgeText = profileData.name || this.translate('anonymous');
        if (profileData.age) {
            nameAgeText += `, ${profileData.age}`;
        }
        this.elements.matchFullModalNameAge.textContent = nameAgeText;

        const fullDescription = profileData.description || this.translate('noDescription');
        this.elements.matchFullModalDescriptionShort.textContent = fullDescription.split('.')[0] + (fullDescription.includes('.') ? '.' : '');
        if (this.elements.matchFullModalDescriptionShort.textContent.length > 100) {
            this.elements.matchFullModalDescriptionShort.textContent = this.elements.matchFullModalDescriptionShort.textContent.substring(0, 97) + '...';
        }

        this.elements.matchFullModalDescriptionFull.textContent = fullDescription;

        this.elements.matchFullModalLastActive.textContent = profileData.lastActive;
        if (profileData.lastActive === this.translate('lastActiveToday')) {
            this.elements.matchFullModalActiveDot.classList.remove('offline');
            this.elements.matchFullModalActiveDot.style.backgroundColor = 'var(--match-active-dot)';
        } else {
            this.elements.matchFullModalActiveDot.classList.add('offline');
            this.elements.matchFullModalActiveDot.style.backgroundColor = 'var(--text-secondary)';
        }

        if (this.calculateDistance(
            this.state.userData.location?.lat,
            this.state.userData.location?.lng,
            profileData.location?.lat,
            profileData.location?.lng
        ) !== null) {
            const distance = this.calculateDistance(
                this.state.userData.location.lat,
                this.state.userData.location.lng,
                profileData.location.lat,
                profileData.location.lng
            );
            this.elements.matchFullModalDistance.textContent = distance ? `${distance} ${this.translate('km')}` : '';
        } else {
            this.elements.matchFullModalDistance.textContent = '';
        }

        // –ù–û–í–´–ï –ü–û–õ–Ø
        // –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É—è "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        this.elements.matchFullModalEducation.textContent = profileData.education || this.translate('noData');
        this.elements.matchFullModalProfession.textContent = profileData.profession || this.translate('noData');

        this.renderTags(this.elements.matchFullModalBadHabits, profileData.badHabits, this.config.badHabitsOptions, 'bad-habit');
        this.renderSingleTag(this.elements.matchFullModalChildren, profileData.children, this.config.childrenOptions, 'children');
        this.renderTags(this.elements.matchFullModalPets, profileData.pets, this.config.petsOptions, 'pets');
        this.renderTags(this.elements.matchFullModalLanguages, profileData.languages, this.config.languagesOptions, 'language');
        this.renderTags(this.elements.matchFullModalDatingGoals, profileData.datingGoals, this.config.datingGoalsOptions, 'dating-goal');
        // –ö–û–ù–ï–¶ –ù–û–í–´–• –ü–û–õ–ï–ô

        const zodiacContainer = this.elements.matchFullModalZodiacSign;
        const zodiacSign = profileData.zodiacSign;
        if (zodiacSign) {
            zodiacContainer.innerHTML = `
                <div class="zodiac-display">
                    <span class="emoji">${zodiacSign.emoji}</span>
                    ${this.translate(zodiacSign.id)}
                </div>
            `;
        } else {
            zodiacContainer.innerHTML = `<div class="no-data">${this.translate('noData')}</div>`;
        }

        this.renderTags(this.elements.matchFullModalLookingFor, profileData.lookingFor, this.config.lookingForOptions, 'looking-for');
        this.renderTags(this.elements.matchFullModalInterests, profileData.interests, this.config.interests, 'interest');

        this.elements.matchFullModalScrollableContent.scrollTop = 0;

        this.elements.matchFullModalOverlay.classList.add('active');
        this.elements.matchFullModalContent.classList.add('active'); // –î–æ–±–∞–≤–ª–µ–Ω–æ
        document.body.style.overflow = 'hidden';
        this.elements.matchFullModalContent.focus(); // Set focus to modal for accessibility
    }

    hideMatchFullModal() {
        if (this.elements.matchFullModalOverlay && this.elements.matchFullModalContent) {
            this.elements.matchFullModalOverlay.classList.remove('active');
            this.elements.matchFullModalContent.classList.remove('active');
            document.body.style.overflow = '';
        }
    }

    // –ù–û–í–ê–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ï–ù–î–ï–†–ò–ù–ì–ê –¢–ï–ì–û–í (–ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ô –í–´–ë–û–†)
    renderTags(container, selectedIds, optionsConfig, classNamePrefix) {
        container.innerHTML = '';
        if (selectedIds && selectedIds.length > 0) {
            selectedIds.forEach(optionId => {
                const option = optionsConfig.find(o => o.id === optionId);
                if (option) {
                    const el = document.createElement('div');
                    el.className = `${classNamePrefix}-item`;
                    el.innerHTML = `
                        <span class="${classNamePrefix}-emoji">${option.emoji}</span>
                        <span class="${classNamePrefix}-text">${this.translate(option.id)}</span>
                    `;
                    container.appendChild(el);
                }
            });
        } else {
            container.innerHTML = `<div class="no-data">${this.translate('noData')}</div>`;
        }
    }

    // –ù–û–í–ê–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ï–ù–î–ï–†–ò–ù–ì–ê –û–î–ò–ù–û–ß–ù–û–ì–û –¢–ï–ì–ê (–ï–î–ò–ù–ò–ß–ù–´–ô –í–´–ë–û–†)
    renderSingleTag(container, selectedId, optionsConfig, classNamePrefix) {
        container.innerHTML = '';
        if (selectedId) {
            const option = optionsConfig.find(o => o.id === selectedId);
            if (option) {
                const el = document.createElement('div');
                el.className = `${classNamePrefix}-item`;
                el.innerHTML = `
                    <span class="${classNamePrefix}-emoji">${option.emoji}</span>
                    <span class="${classNamePrefix}-text">${this.translate(option.id)}</span>
                `;
                container.appendChild(el);
            }
        } else {
            container.innerHTML = `<div class="no-data">${this.translate('noData')}</div>`;
        }
    }

    calculateDistance(lat1, lon1, lat2, lon2) {
        if (!lat1 || !lon1 || !lat2 || !lon2) return null;

        const R = 6371;
        const dLat = this.deg2rad(lat2 - lat1);
        const dLon = this.deg2rad(lon2 - lon1);
        const a =
            Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return Math.round(R * c);
    }

    deg2rad(deg) {
        return deg * (Math.PI / 180);
    }

    getZodiacSign(day, month) {
        if (!day || !month) return null;

        const date = new Date(2000, month - 1, day);
        const monthDay = (month < 10 ? '0' : '') + month + '-' + (day < 10 ? '0' : '') + day;

        for (const sign of this.config.zodiacSigns) {
            const start = sign.start;
            const end = sign.end;

            if (start.substring(0, 2) === '12' && end.substring(0, 2) === '01') {
                if (monthDay >= start || monthDay <= end) {
                    return sign;
                }
            } else {
                if (monthDay >= start && monthDay <= end) {
                    return sign;
                }
            }
        }
        return null;
    }

    translate(key, replacements = {}) {
        let text = this.translations[this.state.currentLanguage][key] || this.translations['en'][key] || key;
        for (const placeholder in replacements) {
            text = text.replace(`{${placeholder}}`, replacements[placeholder]);
        }
        return text;
        }

    setLanguage(lang) {
        if (this.translations[lang]) {
            this.state.currentLanguage = lang;
            localStorage.setItem('appLanguage', lang);
            this.updateTextContent();
            // Re-render current screen to apply language changes
            if (this.state.currentScreen === 'registration') {
                this.formHandler.renderForm();
            } else if (this.state.currentScreen === 'profile') {
                this.profileHandler.showProfile();
            } else if (this.state.currentScreen === 'match') {
                this.matchHandler.showNextProfile();
                this.matchHandler.setupEventListeners();
            } else if (this.state.currentScreen === 'chat' && this.chatHandler) { // Check if loaded
                this.chatHandler.showChatListScreen();
            } else if (this.state.currentScreen === 'settings' && this.settingsHandler) { // Check if loaded
                this.settingsHandler.renderSettings();
            }
            // else if (this.state.currentScreen === 'likedBy') { // –£–î–ê–õ–ï–ù–û
            //     this.renderLikedByList();
            // }
        } else {
            console.warn(`Language "${lang}" not supported.`);
        }
    }

    hexToRgb(hex) {
        const bigint = parseInt(hex.slice(1), 16);
        const r = (bigint >> 16) & 255;
        const g = (bigint >> 8) & 255;
        const b = bigint & 255;
        return `${r}, ${g}, ${b}`;
    }

    shadeColor(color, percent) {
        let f=parseInt(color.slice(1),16),t=percent<0?0:255,p=percent<0?percent*-1:percent,R=f>>16,G=(f>>8)&0x00FF,B=f&0x0000FF;
        return "#"+(0x1000000+(Math.round((t-R)*p)+R)*0x10000+(Math.round((t-G)*p)+G)*0x100+Math.round((t-B)*p)+B).toString(16).slice(1);
    }

    setAppThemeColor(color) {
        if (!this.elements.dynamicStyles) {
            console.error('Dynamic styles element not found!');
            return;
        }

        const primaryRgb = this.hexToRgb(color);
        const primaryDark = this.shadeColor(color, -0.2);
        const primaryLight = this.shadeColor(color, 0.8);

        this.elements.dynamicStyles.textContent = `
            :root {
                --primary: ${color};
                --primary-dark: ${primaryDark};
                --primary-light: ${primaryLight};
                --primary-rgb: ${primaryRgb};
            }
        `;

        const logoPath = document.querySelector('.logo-path');
        if (logoPath) {
            logoPath.setAttribute('stroke', 'var(--primary)');
        }
    }

    updateTextContent() {
        document.getElementById('loadingTitle').textContent = this.translate('loadingTitle');
        document.getElementById('loadingSubtitle').textContent = this.translate('loadingSubtitle');
        document.getElementById('navProfileText').textContent = this.translate('profile');
        document.getElementById('navMatchesText').textContent = this.translate('matches');
        document.getElementById('navChatText').textContent = this.translate('chat');
        document.getElementById('navSettingsText').textContent = this.translate('settings');
        // document.getElementById('navLikedByText').textContent = this.translate('likedBy'); // –£–î–ê–õ–ï–ù–û

        if (this.elements.matchSuccessModal && this.elements.matchSuccessModal.classList.contains('active')) {
            // Re-render match success modal content if it's active
            // This is a simplified approach; a more robust solution would involve re-calling showMatchSuccessModal
            // with the current profile and type, which would re-translate all its content.
            // For now, we just update the buttons.
            this.elements.matchModalChatBtn.textContent = this.translate('writeMessage');
            this.elements.matchModalContinueBtn.textContent = this.translate('continueSwiping');
        }

        const settingsScreen = document.getElementById('settingsScreen');
        if (settingsScreen.classList.contains('active') && this.settingsHandler) {
            this.settingsHandler.renderSettings();
        }

        const chatScreen = document.getElementById('chatScreen');
        if (chatScreen.classList.contains('active') && this.chatHandler) {
            this.chatHandler.updateChatTexts();
        }

        const matchScreen = document.getElementById('matchScreen');
        if (matchScreen.classList.contains('active')) {
            const noProfilesMessageElement = document.getElementById('noProfilesMessage');
            if (noProfilesMessageElement) {
                noProfilesMessageElement.innerHTML = `<p>${this.translate('noNewProfiles')}</p><button class="btn btn-secondary" style="margin-top: 20px;" id="backToProfileFromMatchBtn">${this.translate('backToProfile')}</button>`;
                // Re-bind event listener for this button if it's dynamically re-rendered
                const backToProfileFromMatchBtn = document.getElementById('backToProfileFromMatchBtn');
                if (backToProfileFromMatchBtn) {
                    backToProfileFromMatchBtn.removeEventListener('click', () => this.switchScreen('profile')); // Remove old
                    backToProfileFromMatchBtn.addEventListener('click', () => this.switchScreen('profile')); // Add new
                }
            }
        }

        // const likedByScreen = document.getElementById('likedByScreen'); // –£–î–ê–õ–ï–ù–û
        // if (likedByScreen) {
        //     likedByScreen.querySelector('.section-title').textContent = this.translate('likedByTitle');
        //     likedByScreen.querySelector('.section-description').textContent = this.translate('likedByDescription');
        //     const noLikedByMessageElement = likedByScreen.querySelector('#noLikedByMessage p');
        //     if (noLikedByMessageElement) {
        //         noLikedByMessageElement.textContent = this.translate('noLikedByMessage');
        //     }
        //     // Re-render the list to update button texts
        //     this.renderLikedByList();
        // }

        // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ª–µ–¥–æ–∫–æ–ª–æ–≤
        if (this.elements.icebreakerModalOverlay && this.elements.icebreakerModalOverlay.classList.contains('active')) {
            // Only re-render if chatHandler and activeChatPartner exist
            if (this.chatHandler && this.chatHandler.activeChatPartner) {
                this.showIcebreakerModal(this.chatHandler.activeChatPartner); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            }
        }
    }

    // –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    blockUser(userId) {
        if (!this.state.blockedUsers.includes(userId)) {
            this.state.blockedUsers.push(userId);
            localStorage.setItem('blockedUsers', JSON.stringify(this.state.blockedUsers));
            console.log(`User ${userId} blocked.`);
            // –ï—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç, –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
            if (this.chatHandler && this.chatHandler.activeChatPartner && this.chatHandler.activeChatPartner.id === userId) {
                this.chatHandler.showChatListScreen(); // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤
            }
            // –£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (this.chatHandler && this.chatHandler.chats[userId]) {
                delete this.chatHandler.chats[userId];
                this.chatHandler.renderChatList();
                this.chatHandler.updateTotalUnreadCount(); // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
            }
        }
    }

    isUserBlocked(userId) {
        return this.state.blockedUsers.includes(userId);
    }

    // –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    incrementUnreadMessages() {
        this.state.unreadMessagesCount++;
        this.updateChatNotificationBadge();
    }

    updateChatNotificationBadge() {
        if (this.elements.chatNotificationBadge) {
            if (this.state.unreadMessagesCount > 0) {
                this.elements.chatNotificationBadge.textContent = this.state.unreadMessagesCount;
                this.elements.chatNotificationBadge.classList.add('active');
                if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
                    // Telegram.WebApp.setHeaderColor(getComputedStyle(document.documentElement).getPropertyValue('--surface')); // –û–±–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Ö–µ–¥–µ—Ä–∞, —á—Ç–æ–±—ã –±–µ–π–¥–∂ –±—ã–ª –≤–∏–¥–µ–Ω
                    // Telegram.WebApp.setBadges({ unread_count: this.state.unreadMessagesCount }); // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–µ–π–¥–∂–∞ –≤ Telegram
                }
            } else {
                this.elements.chatNotificationBadge.classList.remove('active');
                if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
                    // Telegram.WebApp.setBadges({ unread_count: 0 });
                }
            }
        }
    }

    // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –õ–ï–î–û–ö–û–õ–û–í
    showIcebreakerModal(partner) {
        if (!this.elements.icebreakerModalOverlay) return;

        this.elements.icebreakerModalTitle.textContent = this.translate('icebreakersTitle');
        this.elements.icebreakerModalDescription.textContent = this.translate('icebreakersDescription');
        this.elements.icebreakerModalCancelBtn.textContent = this.translate('cancel');

        this.elements.icebreakerOptionsContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–ø—Ü–∏–∏

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        const questions = this.config.icebreakers.filter(item => item.type === 'question');
        questions.forEach(q => {
            const item = document.createElement('div');
            item.className = 'icebreaker-option-item';
            item.dataset.icebreakerId = q.id;
            item.dataset.icebreakerType = q.type;
            item.innerHTML = `<span class="emoji">‚ùì</span> <span class="text">${this.translate(q.id)}</span>`;
            item.addEventListener('click', () => this.selectIcebreaker(q.id, q.type, partner));
            this.elements.icebreakerOptionsContainer.appendChild(item);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—ã
        const games = this.config.icebreakers.filter(item => item.type === 'game');
        games.forEach(g => {
            const item = document.createElement('div');
            item.className = 'icebreaker-option-item';
            item.dataset.icebreakerId = g.id;
            item.dataset.icebreakerType = g.type;
            item.innerHTML = `<span class="emoji">üé≤</span> <span class="text">${this.translate(g.id, { partnerName: partner.name })}</span>`;
            item.addEventListener('click', () => this.selectIcebreaker(g.id, g.type, partner));
            this.elements.icebreakerOptionsContainer.appendChild(item);
        });

        this.elements.icebreakerModalOverlay.classList.add('active');
        document.body.style.overflow = 'hidden';
        this.elements.icebreakerModalOverlay.focus();
    }

    hideIcebreakerModal() {
        if (this.elements.icebreakerModalOverlay) {
            this.elements.icebreakerModalOverlay.classList.remove('active');
            document.body.style.overflow = '';
        }
    }

    selectIcebreaker(icebreakerId, type, partner) {
        const icebreaker = this.config.icebreakers.find(item => item.id === icebreakerId);
        if (icebreaker && this.chatHandler) {
            let messageText = this.translate(icebreaker.id, { partnerName: partner.name });
            this.chatHandler.sendMessage(messageText); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            this.hideIcebreakerModal();
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new DatingApp();
});
